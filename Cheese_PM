#!/bin/ksh
function Usage {
	print $1
	print ""
	print "'Cheese' is a utiliy to combine and strip three extract files."
	print "The business dates are appended to find the three actual file names to use:"
	print "Previous Day's (-2), Day just finished (-1) and New Day's (0)"
	print "The three files are combined (with one header from -1 file,"
	print "followed by all the data records, followed by one trailer."
	print "(Note: the RECON file does not have Header/Trailer records.)"
	print "The resulting file is then stripped to give a 8pm-8pm period."
	print "Finally, the Minus Two file is removed, and the Minus One file"
	print "is renamed to become tomorrow's Minus Two file."
	print ""
	print "Normally 'Cheese' is run with no parameters.  Today's date is assumed"
	print "to be the correct date to use.  Yesterday's, today's and tomorrow's"
	print "TLF files are required.  To run for a specific date, all three dates"
	print "must be entered in sequence.  e.g., to run for Sep 21st, enter"
	print "Cheese 2016-09-20 2016-09-21 2016-09-22"
    print ""
	print "The Production envionment SBP1 is assumed."
	print "This can be overridden using -env <ENV>"
	print "where <ENV> can be PM, SBD1, SBM1 or SBT1"
	exit 1
}

function Strip {
	S_IN=$1
	shift
	S_OUT=$1
	shift
	S_DATE=$1
	shift
	S_TIME=$1
	shift
	ls -etr ${S_IN}
	digest -a md5 ${S_IN}
	$WNSCRIPT/STRIPPER3.php -in ${S_IN} -out ${S_OUT} -date ${S_DATE} -time ${S_TIME} -log $LOG/STRIPPER.${S_DATE}.log -stats $DATA/STRIPPER.stats
}

function Log {
	TEXT=$1
	TS=$(date +'%Y-%m-%d %H:%M:%S')
	print - $TS $TEXT
}

function WaitFT {
	FILE_NAME=$1
	shift
	Log "Waiting for ${FILE_NAME} to be copied from BASE24"
	while [[ ! -f ${FILE_NAME} ]];
	do
		sleep 10
	done
	
	Log "File ${FILE_NAME} being copied"
	let COPYING=1
	if [[ ${FILE_NAME} == *RECON* ]]; then
		TRAILER="^FTRECON"
	else
		TRAILER="^000086FTTLF"
	fi

	while [[ ${COPYING} -eq 1 ]];
	do
		sleep 10
		tail -1 ${FILE_NAME} | egrep -s $TRAILER
		COPYING=$?
		FSIZE=$(ls -e ${FILE_NAME} | awk '{print $5}')
		Log "Current EOF: ${FSIZE}"
	done
	Log "Copy of ${FILE_NAME} Complete"
}


function Check_Disc {
    # 2 arguments; Capacity upper, Volume to check
    # Check and show disc usage
    let CRITICAL=1
    # CAPACITYN=${CAPACITY%\%}
	CAPACITYN=$1
	shift
	VOL=$1
    shift
	while [[ CRITICAL -eq 1 ]]; do
		let CNT=0
		df -h $VOL |
		while read LINE
		do
			LINES[$CNT]=$LINE
			let CNT=CNT+1
		done
		LINE=${LINES[1]}
		DFCAP=$(echo $LINE | awk '{print $5}')
		DFCAP=${DFCAP%\%}
		if [[ $DFCAP -gt $CAPACITYN ]]; then
			DFMNT=$(echo $LINE | awk '{print $6}')
			Log "### Mount $DFMNT is at $DFCAP% of capacity ###"
			Log "### Mount $DFMNT MUST BE UNDER $CAPACITY% OF CAPACITY for Cheese_PM to run ###"
			Log "### Cheese_PM will suspend until enough space is available ###"
			Log "### Sleeping for 60 seconds... ###"
			sleep 60
		else
			let CRITICAL=0
		fi
    done
    Log "Disk space is healthy (threshold is $CAPACITYN% on $VOL)"
}
####################################################################################################################################
Log "PM Cheese Starting to Grate"
Log "Cheese_PM v0.5 16th January 2016"
Log "(c) AEVI 2016, 2017"

print ""
print "       #####                                            ######  #     #"
print "     #     #  #    #  ######  ######   ####   ######    #     # ##   ##"
print "    #        #    #  #       #       #       #          #     # # # # #"
print "   #        ######  #####   #####    ####   #####  ###  ######  #  #  #"
print "  #        #    #  #       #            #  #            #       #     #"
print " #     #  #    #  #       #       #    #  #             #       #     #"
print " #####   #    #  ######  ######   ####   ######         #       #     #"
print ""

if [[ "$1" == "-?" || "$1" == "-help" ]]; then
	Usage "Cheese Usage"
fi

C_ENV="SBP1"
C_MODE="PROD"

while [[ "$1" != "" ]];
do
	if [[ $1 == "-dates" ]]; then
		shift
		if [[ "$1" == "" ]]; then
			Usage "All three dates must be specified"
		fi
		DATE_2=$1
		shift
		if [[ "$1" == "" ]]; then
			Usage "All three dates must be specified"
		fi
		DATE_1=$1
		shift
		if [[ "$1" == "" ]]; then
			Usage "All three dates must be specified"
		fi
		DATE_0=$1
		shift
	elif [[ $1 == "-env" ]]; then
		shift
		if [[ "$1" == "" ]]; then
			Usage "No Environment name specified"
		fi
		C_ENV=$1
		shift
	else
		Usage "Unexpected parameter $1"
	fi
done

if [[ "$DATE_2" == "" ]]; then
	DATE_2=$(TZ=Europe/London+24 date +%Y-%m-%d)
	DATE_1=$(TZ=Europe/London    date +%Y-%m-%d)
	DATE_0=$(TZ=Europe/London-24 date +%Y-%m-%d)
fi

Log "Using (-2) extract files for ${DATE_2}"
Log "Using (-1) extract files for ${DATE_1}"
Log "Using (-0) extract files for ${DATE_0}"

Log "Processing for Environment: ${C_ENV}"
if [[ $C_ENV != "SBP1" ]]; then
	C_MODE="TEST"
fi

Log "Running in Mode: ${C_MODE}"

#
# Set the SCP User Name and check disk capacity
#
if [[ $C_ENV == "SBD1" ]]; then
	C_USER="sbadmind"
	Check_Disc 90 /app
elif [[ $C_ENV == "SBM1" ]]; then
	C_USER="sbadminm"
	Check_Disc 90 /app
elif [[ $C_ENV == "SBP1" ]]; then
	C_USER="sbadminp"
	Check_Disc 57 /app3/export
	Check_Disc 80 /u27
elif [[ $C_ENV == "SBT1" ]]; then
	C_USER="sbadmint"
	Check_Disc 90 /app
else
	Usage "Invalid -env Environment specified"
fi

. /export/home/${C_USER}/.profile

#
# Get Base File Names
#
X_DIR=${WNINBOUND}

TLF="SB.EXTRACT.${C_MODE}.TLF"
TLFA="SB.EXTRACT.${C_MODE}.TLFA"
RECON="SB.EXTRACT.${C_MODE}.RECON"

Log "Looking for TLF Files on ${X_DIR} with Base Name of ${TLF}"
Log "Looking for TLFA Files on ${X_DIR} with Base Name of ${TLFA}"
Log "Looking for RECON Files on ${X_DIR} with Base Name of ${RECON}"

TLF_2=${TLF}.${DATE_2}
TLF_1=${TLF}.${DATE_1}
TLF_0=${TLF}.${DATE_0}

TLFA_2=${TLFA}.${DATE_2}
TLFA_1=${TLFA}.${DATE_1}
TLFA_0=${TLFA}.${DATE_0}

RECON_2=${RECON}.${DATE_2}
RECON_1=${RECON}.${DATE_1}
RECON_0=${RECON}.${DATE_0}
#
# Initialise for STRIPPER
#
C_DATE=${DATE_1}
if [[ ${C_ENV} == "SBP1" || ${C_ENV} == "SBM1" ]]; then
	C_TIME="20:00:00"
else
	C_TIME="15:00:00"
fi
Log "Looking for Transaction from ${DATE_2} ${C_TIME} up to ${DATE_1} ${C_TIME}"
####################################################################################################################################
#
# -2 Extract Files
#
WaitFT ${X_DIR}/${TLF_2}.H
Strip ${X_DIR}/${TLF_2}.H ${WNINBOUND}/${TLF_2}.H.STRIPPED ${C_DATE} ${C_TIME}
mv -f ${X_DIR}/${TLF_2}.H ${X_DIR}/${TLF_2}.H.UNSTRIPPED
let WC_2_H=$(wc -l ${WNINBOUND}/${TLF_2}.H.STRIPPED | awk '{print $1}')

WaitFT ${X_DIR}/${TLF_2}.D
Strip ${X_DIR}/${TLF_2}.D ${WNINBOUND}/${TLF_2}.D.STRIPPED ${C_DATE} ${C_TIME}
mv -f ${X_DIR}/${TLF_2}.D ${X_DIR}/${TLF_2}.D.UNSTRIPPED
let WC_2_D=$(wc -l ${WNINBOUND}/${TLF_2}.D.STRIPPED | awk '{print $1}')

WaitFT ${X_DIR}/${TLFA_2}.H
Strip ${X_DIR}/${TLFA_2}.H ${WNINBOUND}/${TLFA_2}.H.STRIPPED ${C_DATE} ${C_TIME}
mv -f ${X_DIR}/${TLFA_2}.H ${X_DIR}/${TLFA_2}.H.UNSTRIPPED
let WCA_2_H=$(wc -l ${WNINBOUND}/${TLFA_2}.H.STRIPPED | awk '{print $1}')

WaitFT ${X_DIR}/${TLFA_2}.D
Strip ${X_DIR}/${TLFA_2}.D ${WNINBOUND}/${TLFA_2}.D.STRIPPED ${C_DATE} ${C_TIME}
mv -f ${X_DIR}/${TLFA_2}.D ${X_DIR}/${TLFA_2}.D.UNSTRIPPED
let WCA_2_D=$(wc -l ${WNINBOUND}/${TLFA_2}.D.STRIPPED | awk '{print $1}')

WaitFT ${X_DIR}/${RECON_2}.H
Strip ${X_DIR}/${RECON_2}.H ${WNINBOUND}/${RECON_2}.H.STRIPPED ${C_DATE} ${C_TIME}
mv -f ${X_DIR}/${RECON_2}.H ${X_DIR}/${RECON_2}.H.UNSTRIPPED
let WCR_2_H=$(wc -l ${WNINBOUND}/${RECON_2}.H.STRIPPED | awk '{print $1}')

WaitFT ${X_DIR}/${RECON_2}.D
Strip ${X_DIR}/${RECON_2}.D ${WNINBOUND}/${RECON_2}.D.STRIPPED ${C_DATE} ${C_TIME}
mv -f ${X_DIR}/${RECON_2}.D ${X_DIR}/${RECON_2}.D.UNSTRIPPED
let WCR_2_D=$(wc -l ${WNINBOUND}/${RECON_2}.D.STRIPPED | awk '{print $1}')
####################################################################################################################################
#
# -0 Extract Files
#
WaitFT ${X_DIR}/${TLF_0}.H
Strip ${X_DIR}/${TLF_0}.H ${WNINBOUND}/${TLF_0}.H.STRIPPED ${C_DATE} ${C_TIME}
mv -f ${X_DIR}/${TLF_0}.H ${X_DIR}/${TLF_0}.H.UNSTRIPPED
let WC_0_H=$(wc -l ${WNINBOUND}/${TLF_0}.H.STRIPPED | awk '{print $1}')

WaitFT ${X_DIR}/${TLF_0}.D
Strip ${X_DIR}/${TLF_0}.D ${WNINBOUND}/${TLF_0}.D.STRIPPED ${C_DATE} ${C_TIME}
mv -f ${X_DIR}/${TLF_0}.D ${X_DIR}/${TLF_0}.D.UNSTRIPPED
let WC_0_D=$(wc -l ${WNINBOUND}/${TLF_0}.D.STRIPPED | awk '{print $1}')

WaitFT ${X_DIR}/${TLFA_0}.H
Strip ${X_DIR}/${TLFA_0}.H ${WNINBOUND}/${TLFA_0}.H.STRIPPED ${C_DATE} ${C_TIME}
mv -f ${X_DIR}/${TLFA_0}.H ${X_DIR}/${TLFA_0}.H.UNSTRIPPED
let WCA_0_H=$(wc -l ${WNINBOUND}/${TLFA_0}.H.STRIPPED | awk '{print $1}')

WaitFT ${X_DIR}/${TLFA_0}.D
Strip ${X_DIR}/${TLFA_0}.D ${WNINBOUND}/${TLFA_0}.D.STRIPPED ${C_DATE} ${C_TIME}
mv -f ${X_DIR}/${TLFA_0}.D ${X_DIR}/${TLFA_0}.D.UNSTRIPPED
let WCA_0_D=$(wc -l ${WNINBOUND}/${TLFA_0}.D.STRIPPED | awk '{print $1}')

WaitFT ${X_DIR}/${RECON_0}.H
Strip ${X_DIR}/${RECON_0}.H ${WNINBOUND}/${RECON_0}.H.STRIPPED ${C_DATE} ${C_TIME}
mv -f ${X_DIR}/${RECON_0}.H ${X_DIR}/${RECON_0}.H.UNSTRIPPED
let WCR_0_H=$(wc -l ${WNINBOUND}/${RECON_0}.H.STRIPPED | awk '{print $1}')

WaitFT ${X_DIR}/${RECON_0}.D
Strip ${X_DIR}/${RECON_0}.D ${WNINBOUND}/${RECON_0}.D.STRIPPED ${C_DATE} ${C_TIME}
mv -f ${X_DIR}/${RECON_0}.D ${X_DIR}/${RECON_0}.D.UNSTRIPPED
let WCR_0_D=$(wc -l ${WNINBOUND}/${RECON_0}.D.STRIPPED | awk '{print $1}')
####################################################################################################################################
#
# -1 Extract Files
#
WaitFT ${X_DIR}/${TLF_1}.H
Strip ${X_DIR}/${TLF_1}.H ${WNINBOUND}/${TLF_1}.H.STRIPPED ${C_DATE} ${C_TIME}
mv -f ${X_DIR}/${TLF_1}.H ${X_DIR}/${TLF_1}.H.UNSTRIPPED
let WC_1_H=$(wc -l ${WNINBOUND}/${TLF_1}.H.STRIPPED | awk '{print $1}')

WaitFT ${X_DIR}/${TLF_1}.D
Strip ${X_DIR}/${TLF_1}.D ${WNINBOUND}/${TLF_1}.D.STRIPPED ${C_DATE} ${C_TIME}
mv -f ${X_DIR}/${TLF_1}.D ${X_DIR}/${TLF_1}.D.UNSTRIPPED
let WC_1_D=$(wc -l ${WNINBOUND}/${TLF_1}.D.STRIPPED | awk '{print $1}')

WaitFT ${X_DIR}/${TLFA_1}.H
Strip ${X_DIR}/${TLFA_1}.H ${WNINBOUND}/${TLFA_1}.H.STRIPPED ${C_DATE} ${C_TIME}
mv -f ${X_DIR}/${TLFA_1}.H ${X_DIR}/${TLFA_1}.H.UNSTRIPPED
let WCA_1_H=$(wc -l ${WNINBOUND}/${TLFA_1}.H.STRIPPED | awk '{print $1}')

WaitFT ${X_DIR}/${TLFA_1}.D
Strip ${X_DIR}/${TLFA_1}.D ${WNINBOUND}/${TLFA_1}.D.STRIPPED ${C_DATE} ${C_TIME}
mv -f ${X_DIR}/${TLFA_1}.D ${X_DIR}/${TLFA_1}.D.UNSTRIPPED
let WCA_1_D=$(wc -l ${WNINBOUND}/${TLFA_1}.D.STRIPPED | awk '{print $1}')

WaitFT ${X_DIR}/${RECON_1}.H
Strip ${X_DIR}/${RECON_1}.H ${WNINBOUND}/${RECON_1}.H.STRIPPED ${C_DATE} ${C_TIME}
mv -f ${X_DIR}/${RECON_1}.H ${X_DIR}/${RECON_1}.H.UNSTRIPPED
let WCR_1_H=$(wc -l ${WNINBOUND}/${RECON_1}.H.STRIPPED | awk '{print $1}')

WaitFT ${X_DIR}/${RECON_1}.D
Strip ${X_DIR}/${RECON_1}.D ${WNINBOUND}/${RECON_1}.D.STRIPPED ${C_DATE} ${C_TIME}
mv -f ${X_DIR}/${RECON_1}.D ${X_DIR}/${RECON_1}.D.UNSTRIPPED
let WCR_1_D=$(wc -l ${WNINBOUND}/${RECON_1}.D.STRIPPED | awk '{print $1}')
####################################################################################################################################
#
# Get record counts
#
Log "After Stripping, TLF Extracts Contain Following Numbers of Records:"
Log "${WC_2_H} ${WNINBOUND}/${TLF_2}.H.STRIPPED"
Log "${WC_1_H} ${WNINBOUND}/${TLF_1}.H.STRIPPED"
Log "${WC_0_H} ${WNINBOUND}/${TLF_0}.H.STRIPPED"

Log "${WC_2_D} ${WNINBOUND}/${TLF_2}.D.STRIPPED"
Log "${WC_1_D} ${WNINBOUND}/${TLF_1}.D.STRIPPED"
Log "${WC_0_D} ${WNINBOUND}/${TLF_0}.D.STRIPPED"

let RECS_H=WC_2_H+WC_1_H+WC_0_H-6
let RECS_D=WC_2_D+WC_1_D+WC_0_D-6
Log "Total Transaction Records Hounslow:  ${RECS_H}"
Log "Total Transaction Records Docklands: ${RECS_D}"

Log "After Stripping, Admin Extracts Contain Following Numbers of Records:"
Log "${WCA_2_H} ${WNINBOUND}/${TLFA_2}.H.STRIPPED"
Log "${WCA_1_H} ${WNINBOUND}/${TLFA_1}.H.STRIPPED"
Log "${WCA_0_H} ${WNINBOUND}/${TLFA_0}.H.STRIPPED"

Log "${WCA_2_D} ${WNINBOUND}/${TLFA_2}.D.STRIPPED"
Log "${WCA_1_D} ${WNINBOUND}/${TLFA_1}.D.STRIPPED"
Log "${WCA_0_D} ${WNINBOUND}/${TLFA_0}.D.STRIPPED"

let RECSA_H=WCA_2_H+WCA_1_H+WCA_0_H-6
let RECSA_D=WCA_2_D+WCA_1_D+WCA_0_D-6
Log "Total Admin Records Hounslow:  ${RECSA_H}"
Log "Total Admin Records Docklands: ${RECSA_D}"

Log "After Stripping, Recon Extracts Contain Following Numbers of Records:"
Log "${WCR_2_H} ${WNINBOUND}/${RECON_2}.H.STRIPPED"
Log "${WCR_1_H} ${WNINBOUND}/${RECON_1}.H.STRIPPED"
Log "${WCR_0_H} ${WNINBOUND}/${RECON_0}.H.STRIPPED"

Log "${WCR_2_D} ${WNINBOUND}/${RECON_2}.D.STRIPPED"
Log "${WCR_1_D} ${WNINBOUND}/${RECON_1}.D.STRIPPED"
Log "${WCR_0_D} ${WNINBOUND}/${RECON_0}.D.STRIPPED"

let RECSR_H=WCR_2_H+WCR_1_H+WCR_0_H-6
let RECSR_D=WCR_2_D+WCR_1_D+WCR_0_D-6
Log "Total Recon Records Hounslow:  ${RECSR_H}"
Log "Total Recon Records Docklands: ${RECSR_D}"
####################################################################################################################################
#
# Complete TLF Extract file
#
TLF_X=${WNINBOUND}/${TLF}

#
# temp work file
#
TEMP_F="${WNINBOUND}/${TLF}.TEMP"

#
# Add the records from the -2 file
#
let RECS=WC_2_H-1
head -${RECS} ${WNINBOUND}/${TLF_2}.H.STRIPPED > ${TEMP_F}
rm -f ${WNINBOUND}/${TLF_2}.H.STRIPPED
let RECS=WC_2_H-2
tail -${RECS} ${TEMP_F} > ${TLF_X}.H

let RECS=WC_2_D-1
head -${RECS} ${WNINBOUND}/${TLF_2}.D.STRIPPED > ${TEMP_F}
rm -f ${WNINBOUND}/${TLF_2}.D.STRIPPED
let RECS=WC_2_D-2
tail -${RECS} ${TEMP_F} > ${TLF_X}.D

#
# Now add the records from the -1 file
#
let RECS=WC_1_H-1
head -${RECS} ${WNINBOUND}/${TLF_1}.H.STRIPPED > ${TEMP_F}
let RECS=WC_1_H-2
tail -${RECS} ${TEMP_F} >> ${TLF_X}.H

let RECS=WC_1_D-1
head -${RECS} ${WNINBOUND}/${TLF_1}.D.STRIPPED > ${TEMP_F}
let RECS=WC_1_D-2
tail -${RECS} ${TEMP_F} >> ${TLF_X}.D

#
# Now add the records from the 0 file
#
let RECS=WC_0_H-1
head -${RECS} ${WNINBOUND}/${TLF_0}.H.STRIPPED > ${TEMP_F}
rm -f ${WNINBOUND}/${TLF_0}.H.STRIPPED
let RECS=WC_0_H-2
tail -${RECS} ${TEMP_F} >> ${TLF_X}.H

let RECS=WC_0_D-1
head -${RECS} ${WNINBOUND}/${TLF_0}.D.STRIPPED > ${TEMP_F}
rm -f ${WNINBOUND}/${TLF_0}.D.STRIPPED
let RECS=WC_0_D-2
tail -${RECS} ${TEMP_F} >> ${TLF_X}.D

let WC_X_H=$(wc -l ${TLF_X}.H | awk '{print $1}')
let FS_X_H=$(ls -e ${TLF_X}.H | awk '{print $5}')

Log "Total Transactions Hounslow:  ${WC_X_H}"
Log "         File Size Hounslow:  ${FS_X_H}"

let WC_X_D=$(wc -l ${TLF_X}.D | awk '{print $1}')
let FS_X_D=$(ls -e ${TLF_X}.D | awk '{print $5}')

Log "Total Transactions Docklands: ${WC_X_D}"
Log "         File Size Docklands: ${FS_X_D}"

if [[ $WC_X_H -ne $WC_X_D || $FS_X_H -ne $FS_X_D ]]; then
	Log "The two TLF extract files are different - sort/merging"
	SORT_KEYS="1.9,1.27 -k 2.42,2.49 -k 3.66,3.84"
	sort -k ${SORT_KEYS} -o ${TLF_X} -u ${TLF_X}.H ${TLF_X}.D
	let STATUS=$?
	Log "SORT exited with status: ${STATUS}"
	rm -f ${TLF_X}.H ${TLF_X}.D
else
	Log "The two TLF extract files are the same"
	mv -f ${TLF_X}.H ${TLF_X}
	rm -f ${TLF_X}.D
fi

#
# Now and Header and Trailer
#
head -1 ${WNINBOUND}/${TLF_1}.H.STRIPPED > ${TEMP_F}
cat ${TLF_X} >> ${TEMP_F}
tail -1 ${WNINBOUND}/${TLF_1}.H.STRIPPED >> ${TEMP_F}
mv -f ${TEMP_F} ${TLF_X}

#
# Clean up files
#
rm -f ${WNINBOUND}/${TLF_1}.H.STRIPPED
rm -f ${WNINBOUND}/${TLF_1}.D.STRIPPED
####################################################################################################################################
#
# Complete Admin Extract file
#
TLFA_X=${WNINBOUND}/${TLFA}

#
# temp work file
#
TEMP_F="${WNINBOUND}/${TLFA}.TEMP"

#
# Add the records from the -2 file
#
let RECS=WCA_2_H-1
head -${RECS} ${WNINBOUND}/${TLFA_2}.H.STRIPPED > ${TEMP_F}
rm -f ${WNINBOUND}/${TLFA_2}.H.STRIPPED
let RECS=WCA_2_H-2
tail -${RECS} ${TEMP_F} > ${TLFA_X}.H

let RECS=WCA_2_D-1
head -${RECS} ${WNINBOUND}/${TLFA_2}.D.STRIPPED > ${TEMP_F}
rm -f ${WNINBOUND}/${TLFA_2}.D.STRIPPED
let RECS=WCA_2_D-2
tail -${RECS} ${TEMP_F} > ${TLFA_X}.D

#
# Now add the records from the -1 file
#
let RECS=WCA_1_H-1
head -${RECS} ${WNINBOUND}/${TLFA_1}.H.STRIPPED > ${TEMP_F}
let RECS=WCA_1_H-2
tail -${RECS} ${TEMP_F} >> ${TLFA_X}.H

let RECS=WCA_1_D-1
head -${RECS} ${WNINBOUND}/${TLFA_1}.D.STRIPPED > ${TEMP_F}
let RECS=WCA_1_D-2
tail -${RECS} ${TEMP_F} >> ${TLFA_X}.D

#
# Now add the records from the 0 file
#
let RECS=WCA_0_H-1
head -${RECS} ${WNINBOUND}/${TLFA_0}.H.STRIPPED > ${TEMP_F}
rm -f ${WNINBOUND}/${TLFA_0}.H.STRIPPED
let RECS=WCA_0_H-2
tail -${RECS} ${TEMP_F} >> ${TLFA_X}.H

let RECS=WCA_0_D-1
head -${RECS} ${WNINBOUND}/${TLFA_0}.D.STRIPPED > ${TEMP_F}
rm -f ${WNINBOUND}/${TLFA_0}.D.STRIPPED
let RECS=WCA_0_D-2
tail -${RECS} ${TEMP_F} >> ${TLFA_X}.D

let WCA_X_H=$(wc -l ${TLFA_X}.H | awk '{print $1}')
let FSA_X_H=$(ls -e ${TLFA_X}.H | awk '{print $5}')
Log "Total Admin Records Hounslow:  ${WCA_X_H}"
Log "          File Size Hounslow:  ${FSA_X_H}"

let WCA_X_D=$(wc -l ${TLFA_X}.D | awk '{print $1}')
let FSA_X_D=$(ls -e ${TLFA_X}.D | awk '{print $5}')

Log "Total Admin Records Docklands: ${WCA_X_D}"
Log "          File Size Docklands: ${FSA_X_D}"

if [[ $WCA_X_H -ne $WCA_X_D || $FSA_X_H -ne $FSA_X_D ]]; then
	Log "The two Admin extract files are different - sort/merging"
	SORT_KEYS="1.9,1.27 -k 2.42,2.49 -k 3.66,3.84"
	sort -k ${SORT_KEYS} -o ${TLFA_X} -u ${TLFA_X}.H ${TLFA_X}.D
	let STATUS=$?
	Log "SORT exited with status: ${STATUS}"
	rm -f ${TLFA_X}.H ${TLFA_X}.D
else
	Log "The two Admin Extract files are the same"
	mv -f ${TLFA_X}.H ${TLFA_X}
	rm -f ${TLFA_X}.D
fi

#
# Now and Header and Trailer
#
head -1 ${WNINBOUND}/${TLFA_1}.H.STRIPPED > ${TEMP_F}
cat ${TLFA_X} >> ${TEMP_F}
tail -1 ${WNINBOUND}/${TLFA_1}.H.STRIPPED >> ${TEMP_F}
mv -f ${TEMP_F} ${TLFA_X}

#
# Clean up files
#
rm -f ${WNINBOUND}/${TLFA_1}.H.STRIPPED
rm -f ${WNINBOUND}/${TLFA_1}.D.STRIPPED
####################################################################################################################################
#
# Complete Recon Extract file
#
RECON_X=${WNINBOUND}/${RECON}

#
# temp work file
#
TEMP_F="${WNINBOUND}/${RECON}.TEMP"

#
# Add the records from the -2 file
#
let RECS=WCR_2_H-1
head -${RECS} ${WNINBOUND}/${RECON_2}.H.STRIPPED > ${TEMP_F}
rm -f ${WNINBOUND}/${RECON_2}.H.STRIPPED
let RECS=WCR_2_H-2
tail -${RECS} ${TEMP_F} > ${RECON_X}.H

let RECS=WCR_2_D-1
head -${RECS} ${WNINBOUND}/${RECON_2}.D.STRIPPED > ${TEMP_F}
rm -f ${WNINBOUND}/${RECON_2}.D.STRIPPED
let RECS=WCR_2_D-2
tail -${RECS} ${TEMP_F} > ${RECON_X}.D

#
# Now add the records from the -1 file
#
let RECS=WCR_1_H-1
head -${RECS} ${WNINBOUND}/${RECON_1}.H.STRIPPED > ${TEMP_F}
rm -f ${WNINBOUND}/${RECON_1}.H.STRIPPED
let RECS=WCR_1_H-2
tail -${RECS} ${TEMP_F} >> ${RECON_X}.H

let RECS=WCR_1_D-1
head -${RECS} ${WNINBOUND}/${RECON_1}.D.STRIPPED > ${TEMP_F}
rm -f ${WNINBOUND}/${RECON_1}.H.STRIPPED
let RECS=WCR_1_D-2
tail -${RECS} ${TEMP_F} >> ${RECON_X}.D

#
# Now add the records from the 0 file
#
let RECS=WCR_0_H-1
head -${RECS} ${WNINBOUND}/${RECON_0}.H.STRIPPED > ${TEMP_F}
rm -f ${WNINBOUND}/${RECON_0}.H.STRIPPED
let RECS=WCR_0_H-2
tail -${RECS} ${TEMP_F} >> ${RECON_X}.H

let RECS=WCR_0_D-1
head -${RECS} ${WNINBOUND}/${RECON_0}.D.STRIPPED > ${TEMP_F}
rm -f ${WNINBOUND}/${RECON_0}.D.STRIPPED
let RECS=WCR_0_D-2
tail -${RECS} ${TEMP_F} >> ${RECON_X}.D

let WCR_X_H=$(wc -l ${RECON_X}.H | awk '{print $1}')
let FSR_X_H=$(ls -e ${RECON_X}.H | awk '{print $5}')
Log "Total Recon Records Hounslow:  ${WCR_X_H}"
Log "          File Size Hounslow:  ${FSR_X_H}"

let WCR_X_D=$(wc -l ${RECON_X}.D | awk '{print $1}')
let FSR_X_D=$(ls -e ${RECON_X}.D | awk '{print $5}')

Log "Total Recon Records Docklands: ${WCR_X_D}"
Log "          File Size Docklands: ${FSR_X_D}"

if [[ $WCR_X_H -ne $WCR_X_D || $FSR_X_H -ne $FSR_X_D ]]; then
	Log "The two Recon Extract files are different - sort/merging"
	SORT_KEYS="1.1,1.69"
	sort -k ${SORT_KEYS} -o ${RECON_X} -u ${RECON_X}.H ${RECON_X}.D
	let STATUS=$?
	Log "SORT exited with status: ${STATUS}"
	rm -f ${RECON_X}.H ${RECON_X}.D
else
	Log "The two Recon Extract files are the same"
	mv -f ${RECON_X}.H ${RECON_X}
	rm -f ${RECON_X}.D
fi
####################################################################################################################################
#
# Now copy TLF to $WNDATA for GL script to use
#
TLF_GL=${WNDATA}/${TLF}
Log "Copying ${TLF_X} to ${TLF_GL}"
cp -p ${TLF_X} ${TLF_GL}
ls -etr ${TLF_GL}
digest -a md5 ${TLF_GL}
let WC_GL=$(wc -l ${TLF_GL} | awk '{print $1}')
let RECS=WC_GL-2
Log "Total Transaction Records: ${RECS}"

#
# Now copy this file to other site
#
MY_NAME=$(hostname)
DR_NAME=$($WNSCRIPT/DRMODE)
if [[ $DR_NAME == "LOGONLY" ]]; then
	Log "No need to SCP ${TLF_GL} - running LOGONLY"
elif [[ $DR_NAME == $MY_NAME ]]; then
	Log "No need to SCP ${TLF_GL} - running on Standby Box"
else
	Log "SCPing ${TLF_GL} to ${DR_NAME} under username ${C_USER}"
	scp -p ${TLF_GL} ${C_USER}@${DR_NAME}:${WNDATA}
fi

#
# Now copy TLFA to $WNDATA for GL script to use
#
TLFA_GL=${WNDATA}/${TLFA}
Log "Copying ${TLFA_X} to ${TLFA_GL}"
cp -p ${TLFA_X} ${TLFA_GL}
ls -etr ${TLFA_GL}
digest -a md5 ${TLFA_GL}
let WC_GL=$(wc -l ${TLFA_GL} | awk '{print $1}')
let RECS=WC_GL-2
Log "Total Admin Records: ${RECS}"
#
# Now copy this file to other site
#
if [[ $DR_NAME == "LOGONLY" ]]; then
	Log "No need to SCP ${TLFA_GL} - running LOGONLY"
elif [[ $DR_NAME == $MY_NAME ]]; then
	Log "No need to SCP ${TLFA_GL} - running on Standby Box"
else
	Log "SCPing ${TLFA_GL} to ${DR_NAME} under username ${C_USER}"
	scp -p ${TLFA_GL} ${C_USER}@${DR_NAME}:${WNDATA}
fi

#
# Now for the RECON
#
mv -f ${RECON_X} ${WNINBOUND}/SB.RECON.${C_MODE}
ls -etr ${WNINBOUND}/SB.RECON.${C_MODE}
digest -a md5 ${WNINBOUND}/SB.RECON.${C_MODE}
let RECS=$(wc -l ${WNINBOUND}/SB.RECON.${C_MODE} | awk '{print $1}')
Log "Total Recon Records: ${RECS}"
#
# Now copy this file to other site
#
if [[ $DR_NAME == "LOGONLY" ]]; then
	Log "No need to SCP ${RECON_X} - running LOGONLY"
elif [[ $DR_NAME == $MY_NAME ]]; then
	Log "No need to SCP ${RECON_X} - running on Standby Box"
else
	Log "SCPing ${RECON_X} to ${DR_NAME} under username ${C_USER}"
	scp -p ${WNINBOUND}/SB.RECON.${C_MODE} ${C_USER}@${DR_NAME}:${WNINBOUND}
fi

Log "Cheese Successfully Grated"
######################
# End Of Script
######################
