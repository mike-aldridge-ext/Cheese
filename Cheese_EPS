#!/bin/ksh
#function Usage {
#	print - $1
#	print ""
#	print "'Cheese2_EPS' is a utiliy to process extract files on BASE24."
#	print "The -2 TLF Extract is assume to exist and be dated."
#	print "The 0 TLF Extract is waited for and dated."
#	print "The -1 TLF Extract is waited for and dated."
#	print "The three Extract files are then SCPd to both PM boxes."
#	print "The -2 file is then renamed to .ARCHIVE."
#	print "The 0 extract is deleted (no longer required)."
#	print "The TLFA Extract is then waited for and SCPd."
#	print "The TLFA is then renamed to TLFA.ARCHIVE."
#	print ""
#	print "The Production envionment SBP1 is assumed."
#	print "This can be overridden using -env <ENV>"
#	print "where <ENV> can be PM, SBD1, SBM1 or SBT1"
#	exit 1
#}

function Log {
	L_TEXT=$*
	L_TS=$(date +'%Y-%m-%d %H:%M:%S')
	L_DATE=$(date +'%F')
	print - "$L_TS (Cheese3_EPS:$C_ENV.$C_LOCAL) $L_TEXT" >> ${C_PWD}/Cheese_EPS_${L_DATE}.log
}

function WaitFT {
	X_FILE=$1
	shift
	FILE_NAME=$1
	shift
	for Z_FILE in ${FILE_NAME}.*.zip; 
	do
		if [[ -f ${Z_FILE} ]]; then
			Log "Non Ack'd previous Zip found: ${Z_FILE} - Resending"
			scp -p -q ${Z_FILE} ${PM_USER}@${PM_HOST}:${PM_INBOUND}
			STATUS=$?
			if [[ $STATUS -ne 0 ]]; then
				Log "scp failed with status: $STATUS"
			fi
		fi
	done
	
	Log "Extract started to ${X_FILE} - waiting for extract to complete"
	let EXTRACTING=1
	if [[ ${X_FILE} == ${RECON_X_FILE} ]]; then
		TRAILER="^FTRECON"
	else
		TRAILER="^000086FTTLF"
	fi
	while [[ ${EXTRACTING} -eq 1 ]];
	do
		sleep 10
		tail -1 ${X_FILE} | egrep -s $TRAILER
		EXTRACTING=$?
		FSIZE=$(ls -e ${X_FILE} | awk '{print $5}')
		Log "Current EOF: ${FSIZE}"
	done
	Log "Extraction of ${X_FILE} Complete"
	TS=$(date +'%Y-%m-%d-%H-%M-%S')
	FILE_NAME_TS=${FILE_NAME}.${TS}
	mv -f ${X_FILE} ${FILE_NAME_TS}
	Log "Extract File ${X_FILE} Renamed To ${FILE_NAME_TS}"
	let FS=$(ls -e ${FILE_NAME_TS} | awk '{print $5}')
	let WC=$(wc -l ${FILE_NAME_TS} | awk '{print $1}')
	let WC=WC-2
	MD5=$(digest -a md5 ${FILE_NAME_TS})
	Log "Extract file: ${FILE_NAME_TS}, Transactions: ${WC}, EOF: ${FS}, Digest: ${MD5}"
	zip ${FILE_NAME_TS}.zip ${FILE_NAME_TS}
	STATUS=$?
	if [[ $STATUS -eq 0 ]]; then
		Log "Extract file ${FILE_NAME_TS} zipped to ${FILE_NAME_TS}.zip"
		rm -f ${FILE_NAME_TS}
		Log "SCPing ${FILE_NAME_TS}.zip to ${PM_HOST}"
		scp -p -q ${FILE_NAME_TS}.zip ${PM_USER}@${PM_HOST}:${PM_INBOUND}
		STATUS=$?
		if [[ $STATUS -ne 0 ]]; then
			Log "Unable to scp ${FILE_NAME_TS}.zip to ${PM_HOST} (scp failed with status: ${STATUS})"
		fi
	else
		Log "Unable to zip file ${FILE_NAME_TS} (zip failed with status: ${STATUS})"
		mv -f ${FILE_NAME_TS} ${X_FILE}
		Log "Extract File ${FILE_NAME_TS} Renamed Back To ${X_FILE}"
	fi
}

function HandleAck {
	ACK_FILE=$1
	shift
	Log "Ack file found: ${ACK_FILE}"
	BASE_NAME=${ACK_FILE%.*}
	if [[ -f ${BASE_NAME}.zip ]]; then
		rm -f ${BASE_NAME}.zip
		Log "${BASE_NAME} Received OK.  Zip Removed"
	else
		Log "Ack received for non-existant Zip"
	fi
	rm -f ${ACK_FILE}
}

C_HOST=$(hostname)
if [[ ${C_HOST} == ltc* ]]; then
	C_LOCAL="H"
else
	C_LOCAL="D"
fi

C_ENV="SBP1"
C_MODE="PROD"

if [[ "$1" == "-env" ]]; then
	shift
	if [[ "$1" == "" ]]; then
		Log "No Environment name specified"
		exit 1
	fi
	C_ENV=$1
	shift
fi

C_PWD=${PWD}

#print ""
#print "       #####                                           #####       ####### ######   #####"
#print "     #     #  #    #  ######  ######   ####   ###### #     #       #       #     # #     #"
#print "    #        #    #  #       #       #       #            #        #       #     # #"
#print "   #        ######  #####   #####    ####   #####   #####   #####  #####   ######   #####"
#print "  #        #    #  #       #            #  #      #                #       #             #"
#print " #     #  #    #  #       #       #    #  #      #                 #       #       #     #"
#print " #####   #    #  ######  ######   ####   ###### #######            ####### #        #####"
#print ""

#if [[ "$1" == "-?" || "$1" == "-help" ]]; then
#	Usage "Cheese2 Usage"
#fi

Log "BASE24 Cheese3 Starting to Grate"
Log "Cheese3_EPS v0.1 1st November 2016"
Log "(c) AEVI 2016"
Log "Processing for Environment: ${C_ENV}.${C_LOCAL}"

if [[ $C_ENV != "SBP1" ]]; then
	C_MODE="TEST"
fi

Log "Running in Mode: ${C_MODE}"

#
# Set Base Directory Name
#
if [[ $C_ENV == "SBD1" ]]; then
	C_USER="b24sbd1"
elif [[ $C_ENV == "SBM1" ]]; then
	C_USER="b24sbp1"
elif [[ $C_ENV == "SBP1" ]]; then
	C_USER="b24sbp1"
elif [[ $C_ENV == "SBT1" ]]; then
	C_USER="b24sbt1"
else
	Log "Invalid -env Envioronment specified"
	exit 2
fi

. /export/home/${C_USER}/.profile
cd ${B24OLTP}

Log "Processing Extract files in Directory: ${B24OLTP}"

TLF_FILE="C.${C_ENV}.${C_LOCAL}.EXTRACT.${C_MODE}.TLF"
TLF_EOD_FILE="C.${C_ENV}.${C_LOCAL}.EXTRACT.EOD.${C_MODE}.TLF"
RECON_FILE="C.${C_ENV}.${C_LOCAL}.RECON.${C_MODE}"

TLF_X_FILE="tx13"
TLF_EOD_X_FILE="tx11"
RECON_X_FILE="reconx2"

Log "Base names for TLF:     ${TLF_X_FILE}    => ${TLF_FILE}"
Log "Base names for TLF_EOD: ${TLF_EOD_X_FILE}    => ${TLF_EOD_FILE}"
Log "Base names for RECON:   ${RECON_X_FILE} => ${RECON_FILE}"

Log "Setting SCP Variables"
if [[ $C_ENV == "SBD1" ]]; then
	PM_HOST=""
	PM_USER="trans-sb"
	PM_INBOUND="app/aci/PM74/SBD1/Cycle/testdata"
elif [[ $C_ENV == "SBM1" ]]; then
	PM_HOST="ltcwnrec-t01"
	PM_USER="trans-sb"
	PM_INBOUND="app/aci/PM74/SBP1/Cycle/testdata"
elif [[ $C_ENV == "SBP1" ]]; then
	PM_HOST="ltcwnrec-p03"
	PM_USER="trans-sb"
	PM_INBOUND="/app3/export/trans-sb/inbound"
elif [[ $C_ENV == "SBT1" ]]; then
	PM_HOST="ltcwnrec-t01"
	PM_USER="trans-sb"
	PM_INBOUND="/app/aci/PM74/SBT1/Cycle/testdata"
else
	Log "Invalid -env Enviornment: ${C_ENV}"
	exit 3
fi

Log "PM Host:      ${PM_HOST}"
Log "User Name:    ${PM_USER}"
Log "Destinations: ${PM_INBOUND}"

Log "To infinity and beyond...."
while [[ 0 -eq 0 ]];
do
	#
	# Wait for an hourly extract file or ACK file
	#
	ACK_FILE="*.ack"
	#Log "Waiting for Hourly Extract or ACK file"
	for C_FILE in ${ACK_FILE} ${TLF_X_FILE} ${TLF_EOD_X_FILE} ${RECON_X_FILE}; 
	do
		if [[ -f ${C_FILE} ]]; then
			if [[ ${C_FILE} == ${TLF_X_FILE} ]]; then
				WaitFT ${TLF_X_FILE} ${TLF_FILE}
			elif [[ ${C_FILE} == ${TLF_EOD_X_FILE} ]]; then
				WaitFT ${TLF_EOD_X_FILE} ${TLF_EOD_FILE}
			elif [[ ${C_FILE} == ${RECON_X_FILE} ]]; then
				WaitFT ${RECON_X_FILE} ${RECON_FILE}
			else
				HandleAck ${C_FILE}
			fi
		else
			sleep 15
		fi
	done
done
Log "Cheese Successfully Grated"
######################
# End Of Script
######################
