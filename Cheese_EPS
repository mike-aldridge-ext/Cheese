#!/bin/ksh
function Usage {
	print - $1
	print ""
	print "'Cheese_EPS' is a utiliy to process extract files on BASE24."
	print "The -2 TLF Extract is assume to exist and be dated."
	print "The 0 TLF Extract is waited for and dated."
	print "The -1 TLF Extract is waited for and dated."
	print "The three Extract files are then SCPd to both PM boxes."
	print "The -2 file is then renamed to .ARCHIVE."
	print "The 0 extract is deleted (no longer required)."
	print "The TLFA Extract is then waited for and SCPd."
	print "The TLFA is then renamed to TLFA.ARCHIVE."
	print ""
	print "The Production envionment SBP1 is assumed."
	print "This can be overridden using -env <ENV>"
	print "where <ENV> can be PM, SBD1, SBM1 or SBT1"
	exit 1
}

function Log {
	TEXT=$1
	TS=$(date +'%Y-%m-%d %H:%M:%S')
	print - $TS $TEXT
}

function WaitFT {
	X_FILE="${X_DIR}/$1"
	shift
	TLF_FILE=$1
	shift
	Log "Waiting for ${TLF_FILE} to be Extracted to ${X_FILE}"
	while [[ ! -f ${X_FILE} ]];
	do
		sleep 10
	done
	Log "Extract started to ${X_FILE} - waiting for extract to complete"
	let EXTRACTING=1
	while [[ ${EXTRACTING} -eq 1 ]];
	do
		sleep 10
		tail -1 ${X_FILE} | egrep -s "^000086FTTLF"
		EXTRACTING=$?
		FSIZE=$(ls -e ${X_FILE} | awk '{print $5}')
		Log "Current EOF: ${FSIZE}"
	done
	Log "Extraction of ${X_FILE} Complete"
	mv -f ${X_FILE} ${TLF_FILE}
	Log "Extract File ${X_FILE} Renamed To ${TLF_FILE}"
}

function WaitEOF {
	X_FILE="${X_DIR}/$1"
	shift
	RECON_FILE=$1
	shift
	Log "Waiting for ${RECON_FILE} to be Extracted to ${X_FILE}"
	while [[ ! -f ${X_FILE} ]];
	do
		sleep 10
	done
	Log "Extract started to ${X_FILE} - waiting for extract to complete"
	let EXTRACTING=1
	PFSIZE=$(ls -e ${X_FILE} | awk '{print $5}')
	while [[ ${EXTRACTING} -eq 1 ]];
	do
		sleep 30
		FSIZE=$(ls -e ${X_FILE} | awk '{print $5}')
		if [[ $FSIZE == $PFSIZE ]]; then
			let EXTRACTING=0
		else
			PFSIZE=$FSIZE
		fi
		Log "Current EOF: ${FSIZE}"
	done
	Log "Extraction of ${X_FILE} Complete"
	mv -f ${X_FILE} ${RECON_FILE}
	Log "Extract File ${X_FILE} Renamed To ${RECON_FILE}"
}

Log "BASE24 Cheese Starting to Grate"
Log "Cheese_EPS v0.4 26th October 2016"
Log "(c) AEVI 2016"

print ""
print "       #####                                            ####### ######   #####"
print "     #     #  #    #  ######  ######   ####   ######    #       #     # #     #"
print "    #        #    #  #       #       #       #          #       #     # #"
print "   #        ######  #####   #####    ####   #####  ###  #####   ######   #####"
print "  #        #    #  #       #            #  #            #       #             #"
print " #     #  #    #  #       #       #    #  #             #       #       #     #"
print " #####   #    #  ######  ######   ####   ######         ####### #        #####"
print ""

if [[ "$1" == "-?" || "$1" == "-help" ]]; then
	Usage "Cheese Usage"
fi

C_ENV="SBP1"
C_MODE="PROD"

if [[ "$1" == "-env" ]]; then
	shift
	if [[ "$1" == "" ]]; then
		Usage "No Environment name specified"
	fi
	C_ENV=$1
	shift
fi

Log "Processing for Environment: ${C_ENV}"

if [[ $C_ENV != "SBP1" ]]; then
	C_MODE="TEST"
fi

Log "Running in Mode: ${C_MODE}"

#
# Set Base Directory Name
#
if [[ $C_ENV == "PM" ]]; then
	X_DIR="/app/aci/PM74/SBT1/Cycle/wnscript/temp/FILES/CheeseEater"
elif [[ $C_ENV == "SBD1" ]]; then
	X_DIR="/app/db/b24oltp/SBD1"
elif [[ $C_ENV == "SBM1" ]]; then
	X_DIR="/app/db/b24oltp/SBP1"
elif [[ $C_ENV == "SBP1" ]]; then
	X_DIR="/app/db/b24oltp/SBP1"
elif [[ $C_ENV == "SBT1" ]]; then
	C_HOST=$(hostname)
	if [[ $C_HOST == "ltcwnsb-t02" ]]; then
		X_DIR="/app/db/b24oltp/STH1"
	else
		X_DIR="/app/db/b24oltp/STD1"
	fi
else
	Usage "Invalid -env Envioronment specified"
fi

Log "Processing Extract files in Directory: ${X_DIR}"

TLF="${X_DIR}/SB.EXTRACT.${C_MODE}.TLF"
TLFA="${X_DIR}/SB.EXTRACT.${C_MODE}.TLFA"
RECON="${X_DIR}/SB.EXTRACT.${C_MODE}.RECON"

Log "Base name for TLF:  ${TLF}"
Log "Base name for TLFA: ${TLFA}"
Log "Base name for RECON: ${RECON}"

TLF_2=${TLF}.$(TZ=Europe/London+24 date +%Y-%m-%d)
TLF_1=${TLF}.$(TZ=Europe/London    date +%Y-%m-%d)
TLF_0=${TLF}.$(TZ=Europe/London-24 date +%Y-%m-%d)
#
# -2 file should always exist
#
Log "Looking for -2 Extract: ${TLF_2}"
if [[ ! -f ${TLF_2} ]]; then
	Usage "-2 Extract file ${TLF_2} Does not Exist"
fi

Log "Found ${TLF_2}"

WaitFT tx4 ${TLF_0}
#Strip ${TLF_0} ${TLF_0}.STRIPPED ${C_DATE} ${C_TIME}

#
# 0 file is creates manually through an extract.
# Wait for it to be created and wait for FT (so we know it's finished
#
#print "Time to run -1 to -1 Extract"
WaitFT tx5 ${TLF_1}
#Strip ${TLF_1} ${TLF_1}.STRIPPED ${C_DATE} ${C_TIME}

#
# Get record counts
#
let WC_2=$(wc -l ${TLF_2} | awk '{print $1}')
let WC_1=$(wc -l ${TLF_1} | awk '{print $1}')
let WC_0=$(wc -l ${TLF_0} | awk '{print $1}')

Log "Extracts Contains Following Numbers of Records:"
Log "${WC_2} ${TLF_2}"
Log "${WC_1} ${TLF_1}"
Log "${WC_0} ${TLF_0}"
let RECS=WC_2+WC_1+WC_0-6
Log "Total Transaction Records: ${RECS}"
#
# Now for file transfers
#
Log "Setting SCP Variables"
if [[ $C_ENV == "PM" ]]; then
	H_HOST="ltcwnrec-t01"
	D_HOST=""
	C_USER="sbadmint"
	C_INBOUND="/app/aci/PM74/SBT1/Cycle/testdata"
elif [[ $C_ENV == "SBD1" ]]; then
	H_HOST=""
	D_HOST="tc2wnrec-t01"
	C_USER="trans-sb"
	C_INBOUND="/app/aci/PM74/SBD1/Cycle/testdata"
elif [[ $C_ENV == "SBM1" ]]; then
	H_HOST="ltcwnrec-t01"
	D_HOST="tc2wnrec-t01"
	C_USER="trans-sb"
	C_INBOUND="/app/aci/PM74/SBP1/Cycle/testdata"
elif [[ $C_ENV == "SBP1" ]]; then
	H_HOST="ltcwnrec-p03"
	D_HOST="tc2wnrec-p03"
	C_USER="trans-sb"
	C_INBOUND="/app3/export/trans-sb/inbound"
elif [[ $C_ENV == "SBT1" ]]; then
	H_HOST="ltcwnrec-t01"
	D_HOST=""
	C_USER="trans-sb"
	C_INBOUND="/app/aci/PM74/SBT1/Cycle/testdata"
else
	Usage "Invalid -env Enviornment: ${C_ENV}"
fi
Log "Hounslow Host:  ${H_HOST}"
Log "Docklands Host: ${D_HOST}"
Log "User Name:      ${C_USER}"
Log "Destinations:   ${C_INBOUND}"

if [[ "$H_HOST" != "" ]]; then
	Log "SCPing ${TLF_2} to ${H_HOST}"
	scp -p -C ${TLF_2} ${C_USER}@${H_HOST}:${C_INBOUND}
	Log "SCPing ${TLF_1} to ${H_HOST}"
	scp -p -C ${TLF_1} ${C_USER}@${H_HOST}:${C_INBOUND}
	Log "SCPing ${TLF_0} to ${H_HOST}"
	scp -p -C ${TLF_0} ${C_USER}@${H_HOST}:${C_INBOUND}
fi
if [[ "$D_HOST" != "" ]]; then
	Log "SCPing ${TLF_2} to ${D_HOST}"
	scp -p -C ${TLF_2} ${C_USER}@${D_HOST}:${C_INBOUND}
	Log "SCPing ${TLF_1} to ${D_HOST}"
	scp -p -C ${TLF_1} ${C_USER}@${D_HOST}:${C_INBOUND}
	Log "SCPing ${TLF_0} to ${D_HOST}"
	scp -p -C ${TLF_0} ${C_USER}@${D_HOST}:${C_INBOUND}
fi
#
# Roll files and clean up
#
Log "Renaming ${TLF_2} to ${TLF_2}.ARCHIVE"
mv -f ${TLF_2} ${TLF_2}.ARCHIVE
Log "Removing ${TLF_0}"
rm -f ${TLF_0}
#
# Admin Extract
#
WaitFT tx2 ${TLFA}
let WC_A=$(wc -l ${TLFA} | awk '{print $1}')
Log "Extract Contains Following Numbers of Records:"
Log "${WC_A} ${TLFA}"

if [[ "$H_HOST" != "" ]]; then
	Log "SCPing ${TLFA} to ${H_HOST}"
	scp -p -C ${TLFA} ${C_USER}@${H_HOST}:${C_INBOUND}
fi
if [[ "$D_HOST" != "" ]]; then
	Log "SCPing ${TLFA} to ${D_HOST}"
	scp -p -C ${TLFA} ${C_USER}@${D_HOST}:${C_INBOUND}
fi
#
# archive it
#
Log "Renaming ${TLFA} to ${TLFA}.ARCHIVE"
mv -f ${TLFA} ${TLFA}.ARCHIVE
#
# Recon Extract - wait for Extract to start and EOF to stop changing
#
WaitEOF reconx1 ${RECON}
let WC_R=$(wc -l ${RECON} | awk '{print $1}')
Log "Extract Contains Following Numbers of Records:"
Log "${WC_R} ${RECON}"

if [[ "$H_HOST" != "" ]]; then
	Log "SCPing ${RECON} to ${H_HOST}"
	scp -p -C ${RECON} ${C_USER}@${H_HOST}:${C_INBOUND}
fi
if [[ "$D_HOST" != "" ]]; then
	Log "SCPing ${RECON} to ${D_HOST}"
	scp -p -C ${RECON} ${C_USER}@${D_HOST}:${C_INBOUND}
fi
#
# archive it
#
Log "Renaming ${RECON} to ${RECON}.ARCHIVE"
mv -f ${RECON} ${RECON}.ARCHIVE
Log "Cheese Successfully Grated"
######################
# End Of Script
######################
